<?php

/**
 * @file
 * Adminic Toolbar module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 *
 * {@inheritdoc}
 */
function adminic_toolbar_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['toolbar_top'] = [
    'variables' => [
      'info' => NULL,
    ],
  ];

  $items['toolbar_primary'] = [
    'variables' => [
      'header' => NULL,
      'widgets' => NULL,
      'user_account' => NULL,
      'toolbar_configuration' => NULL,
    ],
  ];

  $items['toolbar_primary_header'] = [
    'variables' => [
      'title' => NULL,
      'title_link' => NULL,
      'close' => FALSE,
    ],
  ];

  $items['toolbar_primary_section'] = [
    'variables' => [
      'title' => NULL,
      'links' => NULL,
    ],
  ];

  $items['toolbar_primary_section_tab'] = [
    'variables' => [
      'id' => NULL,
      'title' => NULL,
      'url' => NULL,
      'active' => FALSE,
      'badge' => NULL,
    ],
  ];

  $items['toolbar_secondary'] = [
    'variables' => [
      'wrappers' => NULL,
    ],
  ];

  $items['toolbar_secondary_header'] = [
    'variables' => [
      'title' => NULL,
      'title_link' => NULL,
      'close' => FALSE,
    ],
  ];

  $items['toolbar_secondary_wrapper'] = [
    'variables' => [
      'header' => NULL,
      'sections' => NULL,
      'active' => FALSE,
      'id' => FALSE,
    ],
  ];

  $items['toolbar_secondary_section'] = [
    'variables' => [
      'title' => NULL,
      'links' => NULL,
    ],
  ];

  $items['toolbar_secondary_section_link'] = [
    'variables' => [
      'title' => NULL,
      'url' => NULL,
      'active' => FALSE,
      'badge' => NULL,
      'level' => 1,
    ],
  ];

  $items['toolbar_user_account'] = [
    'variables' => [
      'avatar' => NULL,
      'name' => NULL,
      'dropdown' => NULL,
    ],
  ];

  $items['toolbar_configuration'] = [
    'variables' => [
      'content' => NULL,
    ],
  ];

  $items['drd'] = [
    'variables' => [
      'trigger_content' => NULL,
      'content' => NULL,
    ],
  ];

  return $items;
}

/**
 * Implements hook_page_top().
 *
 * Add adminic toolbar to the top of the page automatically.
 *
 * {@inheritdoc}
 *
 * @throws \Exception
 */
function adminic_toolbar_page_top(array &$page_top) {
  $current_user = \Drupal::currentUser();
  /** @var \Drupal\user\PrivateTempStore $tempstore */
  $tempstore = \Drupal::service('user.private_tempstore')->get('adminic_toolbar');
  $use_adminic_toolbar = $tempstore->get('use_adminic_toolbar');
  $can_use_adminic_toolbar = $current_user->hasPermission('can use adminic toolbar');
  $visible_by_default = $current_user->hasPermission('adminic toolbar visible by default');

  $can_use_toolbar = FALSE;
  // User set visibility of the toolbar and can use the toolbar.
  if ($use_adminic_toolbar != NULL && $can_use_adminic_toolbar) {
    $can_use_toolbar = $use_adminic_toolbar;
  }
  // User didn't set visibility and can use toolbar
  // and toolbar is visible by default.
  if ($use_adminic_toolbar == NULL && $can_use_adminic_toolbar && $visible_by_default) {
    $can_use_toolbar = TRUE;
  }

  if ($can_use_toolbar) {
    /** @var \Drupal\adminic_toolbar\Toolbar $adminic_toolbar */
    $adminic_toolbar = \Drupal::service('adminic_toolbar');

    $toolbarPrimary = $adminic_toolbar->getPrimaryToolbar();
    $page_top['adminic_toolbar_primary'] = $toolbarPrimary;

    $toolbarSecondary = $adminic_toolbar->getSecondaryToolbar();
    $page_top['adminic_toolbar_secondary'] = $toolbarSecondary;
  }
}

/**
 * Implements hook_preprocess_html().
 *
 * @inheritdoc
 */
function adminic_toolbar_preprocess_html(array &$variables) {
  // Remove default toolbar.
  if (isset($variables['page_top']['toolbar'], $variables['page_top']['adminic_toolbar_primary'])) {
    unset($variables['page_top']['toolbar']);
  }
  // Add classes to body if Adminic Primary Toolbar is enabled.
  if (isset($variables['page_top']['adminic_toolbar_primary'])) {
    $variables['attributes']['class'][] = 'adminic-toolbar-primary';
    $configuration = \Drupal::service('adminic_toolbar.configuration');
    $compact_mode = (bool) $configuration->get('compact_mode') ?: FALSE;
    if ($compact_mode === TRUE) {
      $variables['attributes']['class'][] = 'adminic-toolbar-compact';
    }
  }
  // Add classes to body if Adminic Top Toolbar is enabled.
  if (isset($variables['page_top']['adminic_toolbar_top'])) {
    $variables['attributes']['class'][] = 'adminic-toolbar-top';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function adminic_toolbar_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_user = \Drupal::currentUser();
  $current_route = \Drupal::service('current_route_match');
  $user = $current_route->getParameter('user');
  if ($user->id() != $current_user->id()) {
    return;
  }

  $can_use_adminic_toolbar = $current_user->hasPermission('can use adminic toolbar');
  $can_change_visibility = $current_user->hasPermission('can change visibillity of adminic toolbar');
  $visible_by_default = $current_user->hasPermission('adminic toolbar visible by default');

  /** @var \Drupal\user\PrivateTempStore $tempstore */
  $tempstore = \Drupal::service('user.private_tempstore')->get('adminic_toolbar');
  $use_adminic_toolbar_value = $tempstore->get('use_adminic_toolbar');
  if ($use_adminic_toolbar_value == NULL && $visible_by_default) {
    $use_adminic_toolbar_value = 1;
  }

  $alter_enabled = FALSE;
  if ($can_use_adminic_toolbar && $can_change_visibility) {
    $alter_enabled = TRUE;
  }


  if ($alter_enabled == TRUE) {
    $form['adminic_toolbar'] = [
      '#type' => 'details',
      '#title' => t('Adminic toolbar'),
      '#open' => TRUE,
      '#weight' => 99,
    ];

    $form['adminic_toolbar']['use_adminic_toolbar'] = [
      '#type' => 'radios',
      '#default_value' => $use_adminic_toolbar_value,
      '#options' => [
        0 => t('No'),
        1 => t('Yes'),
      ],
      '#title' => t('Use Adminic toolbar'),
    ];

    $form['actions']['submit']['#submit'][] = '_adminic_toolbar_user_form_submit';
  }
}

/**
 * Submit adminic toolbar configuration.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @throws \Drupal\user\TempStoreException
 *   Throws Temp Store Exception.
 */
function _adminic_toolbar_user_form_submit(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  /** @var \Drupal\user\PrivateTempStore $tempstore */
  $tempstore = \Drupal::service('user.private_tempstore')->get('adminic_toolbar');

  if (isset($values['use_adminic_toolbar'])) {
    $tempstore->set('use_adminic_toolbar', $values['use_adminic_toolbar']);
  }
}
